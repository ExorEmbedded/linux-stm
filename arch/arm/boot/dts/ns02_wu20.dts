/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
 * Copyright (C) STMicroelectronics 2019 - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/dts-v1/;
#include "stm32mp157c.dtsi"
#include "stm32mp157c-m4-srm.dtsi"
#include "stm32mp157cac-pinctrl.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/mfd/st,stpmic1.h>
#include <dt-bindings/rtc/rtc-stm32.h>
/* USER CODE END includes */

/ {
	model = "STM32MP157C NS02 board";
	compatible = "st,stm32mp157c-ns02", "st,stm32mp157";

	memory@c0000000 {
		reg = <0xc0000000 0x40000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */

		retram: retram@0x38000000 {
			compatible = "shared-dma-pool";
			reg = <0x38000000 0x10000>;
			no-map;
		};

		mcuram: mcuram@0x30000000 {
			compatible = "shared-dma-pool";
			reg = <0x30000000 0x40000>;
			no-map;
		};

		mcuram2: mcuram2@0x10000000 {
			compatible = "shared-dma-pool";
			reg = <0x10000000 0x40000>;
			no-map;
		};

		vdev0vring0: vdev0vring0@10040000 {
			compatible = "shared-dma-pool";
			reg = <0x10040000 0x2000>;
			no-map;
		};

		vdev0vring1: vdev0vring1@10042000 {
			compatible = "shared-dma-pool";
			reg = <0x10042000 0x2000>;
			no-map;
		};

		vdev0buffer: vdev0buffer@10044000 {
			compatible = "shared-dma-pool";
			reg = <0x10044000 0x4000>;
			no-map;
		};
		/* USER CODE END reserved-memory */

		gpu_reserved: gpu@f8000000 {
			reg = <0xf8000000 0x8000000>;
			no-map;
		};
	};

	/* USER CODE BEGIN root */
	aliases {
		serial0 = &uart5;
		serial1 = &uart4;
		ethernet1 = &usbeth;
		ethernet0 = &ethernet0;
		spi0 = &spi3;
		spi1 = &spi5;
		mmc0 = &sdmmc1;
		mmc1 = &sdmmc2;
		can0 = &m_can1;
		can1 = &m_can2;
	};

	chosen {
		stdout-path = "serial0:115200n8";
	};

	sram: sram@10050000 {
		compatible = "mmio-sram";
		reg = <0x10050000 0x10000>;
		#address-cells = <1>;
		#size-cells = <1>;
		ranges = <0 0x10050000 0x10000>;

		dma_pool: dma_pool@0 {
			reg = <0x0 0x10000>;
			pool;
		};
	};
	
	ns02_rst {
		soft_rst_gpio = <&gpioz 5 GPIO_ACTIVE_HIGH>;
	};
	
	leds:leds {
		compatible = "gpio-leds";
        
		dlled@1 {
			label = "ns02:dl:usr0";
			gpios = <&gpiof 13 GPIO_ACTIVE_HIGH>;
			default-state = "on";
		};
  
		faultled@2 {
			label = "ns02:fault:usr0";
			gpios = <&gpioz 7 GPIO_ACTIVE_LOW>;
			default-state = "off";
		};
	};

	gpio_buttons: gpio_buttons@0 {
		compatible = "gpio-keys-polled";
		poll-interval = <50>;
		#address-cells = <1>;
		#size-cells = <0>;

		button@1 {
		    label = "L1";
		    linux,code = <59>; /* KEY_F1 */
		    gpios = <&gpioe 9 GPIO_ACTIVE_LOW>;
		};

		button@2 {
		    label = "L2";
		    linux,code = <60>; /* KEY_F2 */
		    gpios = <&gpioe 10 GPIO_ACTIVE_LOW>;
		};

		button@3 {
		    label = "L3";
		    linux,code = <61>; /* KEY_F3 */
		    gpios = <&gpioe 7 GPIO_ACTIVE_LOW>;
		};

		button@4 {
		    label = "L4";
		    linux,code = <62>; /* KEY_F4 */
		    gpios = <&gpiof 7 GPIO_ACTIVE_LOW>;
		};

		button@5 {
		    label = "L5";
		    linux,code = <63>; /* KEY_F5 */
		    gpios = <&gpioa 15 GPIO_ACTIVE_LOW>;
		};

		button@6 {
		    label = "L6";
		    linux,code = <64>; /* KEY_F6 */
		    gpios = <&gpiob 0 GPIO_ACTIVE_LOW>;
		};
	};

    regulators {
        compatible = "simple-bus";
        #address-cells = <1>;
        #size-cells = <0>;

        v3v3: regulator@0 {
            compatible = "regulator-fixed";
            reg = <0>;
            gpio = <&gpiod 7 0>;
            enable-active-high;
            regulator-name = "dummy-3v3-supply";
            regulator-boot-on;
            regulator-always-on;
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
        };

		reg_sd1_vmmc: sd1_regulator {
			compatible = "regulator-fixed";
			regulator-name = "sdcard_enable";
			reg = <1>;
			regulator-min-microvolt = <3300000>;
			regulator-max-microvolt = <3300000>;
			regulator-boot-on;
			regulator-always-on;
			enable-active-low;
		};
		
		v2v8: v2v8reg {
			compatible = "regulator-fixed";
			regulator-name = "camera-supply";
			reg = <3>;
			regulator-min-microvolt = <2800000>;
			regulator-max-microvolt = <2800000>;
			gpio = <&gpiof 12 0>;
			enable-active-high;
			regulator-boot-on;
			regulator-always-on;
		};
	};

	panel_rgb: panel-rgb {
		compatible = "exor,hw_dispid";
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&ns02_ltdc_pins>;
		pinctrl-1 = <&ns02_ltdc_pins_sleep>;
		enable-gpios = <&gpiof 4 GPIO_ACTIVE_HIGH>;
		backlight = <&backlight>;
		status = "okay";
		port {
			panel_in_rgb: endpoint {
				remote-endpoint = <&ltdc_out_rgb>;
			};
		};
	};

	backlight: backlight {
		compatible = "pwm-backlight";
		pwms = <&pwm2 0 50000 0>;
		brightness-levels = <0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100>;
		default-brightness-level = <0>;
		enable-gpios = <&gpiof 2 GPIO_ACTIVE_HIGH>;
		status = "okay";
	};

	working_hours {
		compatible = "working_hours";
		nvmem-names = "eeprom", "rtcnvram";
		nvmem = <&seeprom0>, <&m41t83>;
		backlight = <&backlight>;
		status = "okay";
	};

	beeper {
		compatible = "pwm-beeper";
		pwms = <&pwm5 0 50000 0>;
	};

	dig_io:dig_io {
		compatible = "exor,gpio_initializer";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_dig_io>;

		gpios = <&gpioe 5  0x21>, <&gpioe 12 0x21>, <&gpioe 4 0x21>, <&gpiog 12 0x21>, <&gpioa 3 0x21>,  <&gpiob 1 0x21>,
				<&gpiod 12 0x20>, <&gpiod 14 0x20>, <&gpioe 6 0x20>, <&gpioh 8 0x20>,  <&gpiod 15 0x20>, <&gpioh 2 0x20>;

		gpio-names = "flt12", "flt34", "in1", "in2", "in3", "in4",
					 "en12", "en34", "out1", "out2", "out3", "out4";
	};
	
	/* USER CODE END root */

	clocks {
		/* USER CODE BEGIN clocks */
		/* USER CODE END clocks */

		clk_lsi: clk-lsi {
			clock-frequency = <32000>;
		};

		clk_hsi: clk-hsi {
			clock-frequency = <64000000>;
		};

		clk_lse: clk-lse {
			clock-frequency = <32768>;
		};

		clk_hse: clk-hse {
			clock-frequency = <24000000>;
		};
		
		clk_ext_camera: clk-ext-camera {
			#clock-cells = <0>;
			compatible = "fixed-clock";
			clock-frequency = <24000000>;
		};
	};
	
	usb_phy_tuning: usb-phy-tuning {
		st,hs-dc-level = <2>;
		st,fs-rftime-tuning;
		st,hs-rftime-reduction;
		st,hs-current-trim = <15>;
		st,hs-impedance-trim = <1>;
		st,squelch-level = <3>;
		st,hs-rx-offset = <2>;
		st,no-lsfs-sc;
	};

}; /*root*/

&pinctrl {
	u-boot,dm-pre-reloc;

	i2c1_pins_mx: i2c1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 14, AF5)>, /* I2C1_SCL */
					 <STM32_PINMUX('F', 15, AF5)>; /* I2C1_SDA */
			bias-pull-up;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c1_sleep_pins_mx: i2c1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 14, ANALOG)>, /* I2C1_SCL */
					 <STM32_PINMUX('F', 15, ANALOG)>; /* I2C1_SDA */
		};
	};

	sdmmc1_pins_mx: sdmmc1_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};

	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>; /* SDMMC1_D3 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
		pins3 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
					 <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
		};
	};

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('G', 6, AF10)>, /* SDMMC2_CMD */
					 <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('C', 6, AF10)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, AF10)>; /* SDMMC2_D7 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('B', 9, AF10)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('C', 6, AF10)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, AF10)>; /* SDMMC2_D7 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
		pins3 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
					 <STM32_PINMUX('G', 6, ANALOG)>, /* SDMMC2_CMD */
					 <STM32_PINMUX('A', 8, ANALOG)>, /* SDMMC2_D4 */
					 <STM32_PINMUX('B', 9, ANALOG)>, /* SDMMC2_D5 */
					 <STM32_PINMUX('C', 6, ANALOG)>, /* SDMMC2_D6 */
					 <STM32_PINMUX('C', 7, ANALOG)>; /* SDMMC2_D7 */
		};
	};

	uart5_pins_mx: uart5_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 12, AF14)>; /* UART5_RX */
			bias-disable;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 13, AF14)>; /* UART5_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart5_sleep_pins_mx: uart5_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('B', 12, ANALOG)>, /* UART5_RX */
					 <STM32_PINMUX('B', 13, ANALOG)>; /* UART5_TX */
		};
	};

	uart4_pins_mx: uart4_mx-0 {
		u-boot,dm-pre-reloc;
		pins1 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('H', 14, AF8)>; /* UART4_RX */
			bias-disable;
		};
		pins2 {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('A', 13, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		u-boot,dm-pre-reloc;
		pins {
			u-boot,dm-pre-reloc;
			pinmux = <STM32_PINMUX('H', 14, ANALOG)>, /* UART4_RX */
					 <STM32_PINMUX('A', 13, ANALOG)>; /* UART4_TX */
		};
	};
	
	/* USER CODE BEGIN pinctrl */
	ns02_ltdc_pins: ltdc-ns02-0 {
		pins {
			pinmux = <STM32_PINMUX('G',  7, AF14)>, /* LCD_CLK */
					 <STM32_PINMUX('I', 10, AF14)>, /* LCD_HSYNC */
					 <STM32_PINMUX('I',  9, AF14)>, /* LCD_VSYNC */
					 <STM32_PINMUX('F', 10, AF14)>, /* LCD_DE */
					 <STM32_PINMUX('H',  9, AF14)>, /* LCD_R3 */
					 <STM32_PINMUX('A', 11, AF14)>, /* LCD_R4 */
					 <STM32_PINMUX('C',  0, AF14)>, /* LCD_R5 */
					 <STM32_PINMUX('H', 12, AF14)>, /* LCD_R6 */
					 <STM32_PINMUX('E', 15, AF14)>, /* LCD_R7 */
					 <STM32_PINMUX('H', 13, AF14)>, /* LCD_G2 */
					 <STM32_PINMUX('G', 10, AF9 )>, /* LCD_G3 */
					 <STM32_PINMUX('H',  4, AF14)>, /* LCD_G4 */
					 <STM32_PINMUX('I',  0, AF14)>, /* LCD_G5 */
					 <STM32_PINMUX('I', 11, AF9 )>, /* LCD_G6 */
					 <STM32_PINMUX('G',  8, AF14)>, /* LCD_G7 */
					 <STM32_PINMUX('G', 11, AF14)>, /* LCD_B3 */
					 <STM32_PINMUX('I',  4, AF14)>, /* LCD_B4 */
					 <STM32_PINMUX('I',  5, AF14)>, /* LCD_B5 */
					 <STM32_PINMUX('I',  6, AF14)>, /* LCD_B6 */
					 <STM32_PINMUX('D',  8, AF14)>; /* LCD_B7 */
					bias-disable;
					drive-push-pull;
					slew-rate = <1>;
		};
	};

	ns02_ltdc_pins_sleep: ltdc-ns02-1 {
		pins {
			pinmux = <STM32_PINMUX('G',  7, ANALOG)>, /* LCD_CLK */
					 <STM32_PINMUX('I', 10, ANALOG)>, /* LCD_HSYNC */
					 <STM32_PINMUX('I',  9, ANALOG)>, /* LCD_VSYNC */
					 <STM32_PINMUX('F', 10, ANALOG)>, /* LCD_DE */
					 <STM32_PINMUX('H',  9, ANALOG)>, /* LCD_R3 */
					 <STM32_PINMUX('A', 11, ANALOG)>, /* LCD_R4 */
					 <STM32_PINMUX('C',  0, ANALOG)>, /* LCD_R5 */
					 <STM32_PINMUX('H', 12, ANALOG)>, /* LCD_R6 */
					 <STM32_PINMUX('E', 15, ANALOG)>, /* LCD_R7 */
					 <STM32_PINMUX('H', 13, ANALOG)>, /* LCD_G2 */
					 <STM32_PINMUX('G', 10, ANALOG)>, /* LCD_G3 */
					 <STM32_PINMUX('H',  4, ANALOG)>, /* LCD_G4 */
					 <STM32_PINMUX('I',  0, ANALOG)>, /* LCD_G5 */
					 <STM32_PINMUX('I', 11, ANALOG)>, /* LCD_G6 */
					 <STM32_PINMUX('G',  8, ANALOG)>, /* LCD_G7 */
					 <STM32_PINMUX('G', 11, ANALOG)>, /* LCD_B3 */
					 <STM32_PINMUX('I',  4, ANALOG)>, /* LCD_B4 */
					 <STM32_PINMUX('I',  5, ANALOG)>, /* LCD_B5 */
					 <STM32_PINMUX('I',  6, ANALOG)>, /* LCD_B6 */
					 <STM32_PINMUX('D',  8, ANALOG)>; /* LCD_B7 */
		};
	};
	
	pwm2bl_pins: pwm2bl-pins-0 {
		pins {
			pinmux = <STM32_PINMUX('A',  5, AF1)>; /* DIMM */
			bias-pull-down;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	pwm2bl_sleep_pins: pwm2bl-pins-1 {
		pins {
			pinmux = <STM32_PINMUX('A',  5, ANALOG)>; /* DIMM */
		};
	};

	pwm5beep_pins: pwm5beep-pins-0 {
		pins {
			pinmux = <STM32_PINMUX('A',  0, AF2)>; /* BEEPER */
			bias-pull-down;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	pwm5beep_sleep_pins: pwm5beep-pins-1 {
		pins {
			pinmux = <STM32_PINMUX('A',  0, ANALOG)>; /* BEEPER */
		};
	};
	
	ethernet0_rmii_pins: rmii-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 11, AF11)>, /* RMII_TXEN */
			<STM32_PINMUX('G', 13, AF11)>, /* ETH_RMII_TXD0 */
			<STM32_PINMUX('G', 14, AF11)>, /* ETH_RMII_TXD1 */
			<STM32_PINMUX('A', 2,  AF11)>, /* ETH_MDIO */
			<STM32_PINMUX('C', 1,  AF11)>; /* ETH_MDC */
			bias-disable;
			drive-push-pull;
			slew-rate = <2>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 4, AF11)>, /* ETH_RMII_RXD0 */
			<STM32_PINMUX('C', 5, AF11)>, /* ETH_RMII_RXD1 */
			<STM32_PINMUX('A', 1, AF11)>, /* ETH_RMII_CLK */
			<STM32_PINMUX('A', 7, AF11)>; /* ETH_RMII_DV */
			bias-disable;
		};
	};

	ethernet0_rmii_pins_sleep: rmii-1 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 11, ANALOG)>, /* RMII_TXEN */
			<STM32_PINMUX('G', 13, ANALOG)>, /* ETH_RMII_TXD0 */
			<STM32_PINMUX('G', 14, ANALOG)>, /* ETH_RMII_TXD1 */
			<STM32_PINMUX('A', 2,  ANALOG)>, /* ETH_MDIO */
			<STM32_PINMUX('C', 1,  ANALOG)>, /* ETH_MDC */
			<STM32_PINMUX('C', 4, ANALOG)>, /* ETH_RMII_RXD0 */
			<STM32_PINMUX('C', 5, ANALOG)>, /* ETH_RMII_RXD1 */
			<STM32_PINMUX('A', 1, ANALOG)>, /* ETH_RMII_CLK */
			<STM32_PINMUX('A', 7, ANALOG)>; /* ETH_RMII_DV */
			bias-disable;
		};
	};

	can0_pins: m_can0-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 12, AF9)>; /* CAN1_TX */
			slew-rate = <1>;
			drive-push-pull;
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 0, AF9)>; /* CAN1_RX */
			bias-disable;
		};
	};

	can0_pins_sleep: m_can0-1 {
		pins {
			pinmux = <STM32_PINMUX('A', 12, ANALOG)>, /* CAN1_TX */
			<STM32_PINMUX('D', 0, ANALOG)>; /* CAN1_RX */
		};
	};
	
	can1_pins: m_can1-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 6, AF9)>; /* CAN2_TX */
			slew-rate = <1>;
			drive-push-pull;
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 5, AF9)>; /* CAN2_RX */
			bias-disable;
		};
	};

	can1_pins_sleep: m_can1-1 {
		pins {
			pinmux = <STM32_PINMUX('B', 6, ANALOG)>, /* CAN2_TX */
			<STM32_PINMUX('B', 5, ANALOG)>; /* CAN2_RX */
		};
	};
	
	spi3_pins_ns02: spi3-0 {
		pins1 {
			pinmux = <STM32_PINMUX('E', 0, AF5)>, /* SPI3_SCK */
					 <STM32_PINMUX('B', 2, AF7)>; /* SPI3_MOSI */
					 bias-disable;
					 drive-push-pull;
					 slew-rate = <1>;
			};
			pins2 {
					 pinmux = <STM32_PINMUX('D', 10, AF5)>; /* SPI3_MISO */
					 bias-disable;
			};
	};

	spi5_pins_ns02: spi5-0 {
		pins1 {
			pinmux = <STM32_PINMUX('H', 6, AF5)>, /* SPI5_SCK */
					 <STM32_PINMUX('F',11, AF5)>; /* SPI5_MOSI */
					 bias-disable;
					 drive-push-pull;
					 slew-rate = <1>;
			};
			pins2 {
					 pinmux = <STM32_PINMUX('F', 8, AF5)>; /* SPI5_MISO */
					 bias-disable;
			};
	};

	dcmi_pins_ns02: dcmi_ns02-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 9,  AF13)>,/* DCMI_HSYNC */
					 <STM32_PINMUX('B', 7,  AF13)>,/* DCMI_VSYNC */
					 <STM32_PINMUX('C', 2,  AF13)>,/* DCMI_PIXCLK */
					 <STM32_PINMUX('A', 9,  AF13)>,/* DCMI_D0 */
					 <STM32_PINMUX('H', 10, AF13)>,/* DCMI_D1 */
					 <STM32_PINMUX('H', 11, AF13)>,/* DCMI_D2 */
					 <STM32_PINMUX('E', 1,  AF13)>,/* DCMI_D3 */
					 <STM32_PINMUX('E', 11, AF13)>,/* DCMI_D4 */
					 <STM32_PINMUX('D', 3,  AF13)>,/* DCMI_D5 */
					 <STM32_PINMUX('E', 13, AF13)>,/* DCMI_D6 */
					 <STM32_PINMUX('I', 7,  AF13)>,/* DCMI_D7 */
					 <STM32_PINMUX('I', 1,  AF13)>,/* DCMI_D8 */
					 <STM32_PINMUX('H', 7,  AF13)>,/* DCMI_D9 */
					 <STM32_PINMUX('D', 6,  AF13)>,/* DCMI_D10 */
					 <STM32_PINMUX('H', 15, AF13)>;/* DCMI_D11 */
					 bias-disable;
			};
	};

	dcmi_sleep_pins_ns02: dcmi_sleep_ns02-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 9,  ANALOG)>,/* DCMI_HSYNC */
					 <STM32_PINMUX('B', 7,  ANALOG)>,/* DCMI_VSYNC */
					 <STM32_PINMUX('C', 2,  ANALOG)>,/* DCMI_PIXCLK */
					 <STM32_PINMUX('A', 9,  ANALOG)>,/* DCMI_D0 */
					 <STM32_PINMUX('H', 10, ANALOG)>,/* DCMI_D1 */
					 <STM32_PINMUX('H', 11, ANALOG)>,/* DCMI_D2 */
					 <STM32_PINMUX('E', 1,  ANALOG)>,/* DCMI_D3 */
					 <STM32_PINMUX('E', 11, ANALOG)>,/* DCMI_D4 */
					 <STM32_PINMUX('D', 3,  ANALOG)>,/* DCMI_D5 */
					 <STM32_PINMUX('E', 13, ANALOG)>,/* DCMI_D6 */
					 <STM32_PINMUX('I', 7,  ANALOG)>,/* DCMI_D7 */
					 <STM32_PINMUX('I', 1,  ANALOG)>,/* DCMI_D8 */
					 <STM32_PINMUX('H', 7,  ANALOG)>,/* DCMI_D9 */
					 <STM32_PINMUX('D', 6,  ANALOG)>,/* DCMI_D10 */
					 <STM32_PINMUX('H', 15, ANALOG)>;/* DCMI_D11 */
					 bias-disable;
			};
	};
	
	/* USER CODE END pinctrl */
};

&m4_rproc{
	mboxes = <&ipcc 0>, <&ipcc 1>, <&ipcc 2>;
	mbox-names = "vq0", "vq1", "shutdown";
	recovery;
	status = "okay";

	/* USER CODE BEGIN m4_rproc */
	interrupt-parent = <&exti>;
	interrupts = <68 1>;
	interrupt-names = "wdg";
	/* USER CODE END m4_rproc */
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

&hsem{
	status = "okay";

	/* USER CODE BEGIN hsem */
	/* USER CODE END hsem */
};

&i2c1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins_mx>;
	pinctrl-1 = <&i2c1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c1 */
	i2c-scl-rising-time-ns = <100>;
	i2c-scl-falling-time-ns = <7>;
	/delete-property/dmas;
	/delete-property/dma-names;
	
	seeprom0:seeprom0@54 {
		compatible = "atmel,24c02";
		reg = <0x54>;
	};

	seeprom1:seeprom1@50 {
		compatible = "atmel,24c02";
		reg = <0x50>;
	};

	seeprom2:seeprom2@51 {
		compatible = "atmel,24c02";
		reg = <0x51>;
	};
	
	m41t83:m41t83@68 {
		compatible = "st,m41t83";
		reg = <0x68>;
	};

	htu21d@40 {
	  /* Temperature/humidity */
	  compatible = "htu21";
	  reg = <0x40>;
	};

	lps22hb@5d {
	    /* Pressure sensor LPS22HB */
	    compatible = "st,lps22hb-press";
	    reg = <0x5d>;
	};
	
	pca9633: pca9633 {
	  compatible = "nxp,pca9633";
	  #address-cells = <1>;
	  #size-cells = <0>;
	  reg = <0x62>;

	    red@0 {
		    label = "red";
		    reg = <0>;
		    linux,default-trigger = "none";
	      
	    };
	    green@1 {
		    label = "green";
		    reg = <1>;
		    linux,default-trigger = "none";
	    };
	    blue@2 {
		    label = "blue";
		    reg = <2>;
		    linux,default-trigger = "none";
	    };
	    unused@3 {
		    label = "unused";
		    reg = <3>;
		    linux,default-trigger = "none";
	    };
	};

	lis331dlh@18 {
	  /* Accelerometer */
	  compatible = "st,lis331dlh-accel";
	  reg = <0x18>;
	};

	adv7280@20 {
		status = "okay";
		compatible = "adi,adv7280";
		reg = <0x20>;
/*	  	pwn-gpios = <&tca6424_sb_23 13 GPIO_ACTIVE_HIGH>;*/
		csi_id =<0>; /* ?? */
		cvbs = <1>; /* Analogue channel: input 8 */
/*	  	clocks = <&clks IMX7D_CSI_MCLK_ROOT_CLK>;
		clock-names = "csi_mclk";*/
		clocks = <&clk_ext_camera>;
		clock-names = "xclk";
	};

	/* we20 FPGA; most settings taken from ov5640 camera and ignored */
	we20cam: camera@55 {
		compatible = "exor,we20cam";
		reg = <0x55>;
		clocks = <&clk_ext_camera>;
		clock-names = "xclk";
		DOVDD-supply = <&v2v8>;
		rotation = <0>;
		status = "okay";

		port {
			we20cam_0: endpoint {
				remote-endpoint = <&dcmi_0>;
				bus-width = <8>;
				data-shift = <0>; /* lines 7:0 are used */
				hsync-active = <1>;
				vsync-active = <1>;
				pclk-sample = <1>;
				pclk-max-frequency = <77000000>;
			};
		};
	};
	
	opt3001@44 {
	  compatible = "ti,opt3001";
	  reg = <0x44>;
	};		
	/* USER CODE END i2c1 */
};

&i2c2{
	pinctrl-names = "default", "sleep";
	status = "okay";
	
	/*NOTE: pinmux still set by bootloader */

	/* USER CODE BEGIN i2c2 */
	pmic: stpmic@33 {
		compatible = "st,stpmic1";
		reg = <0x33>;
		interrupts-extended = <&exti_pwr 55 IRQ_TYPE_EDGE_FALLING>;
		interrupt-controller;
		#interrupt-cells = <2>;
		status = "okay";

		st,main-control-register = <0x04>;
		st,vin-control-register = <0xc0>;
		st,usb-control-register = <0x20>;

		regulators {
			compatible = "st,stpmic1-regulators";

			ldo1-supply = <&v3v3>;
			ldo3-supply = <&vdd_ddr>;
			ldo6-supply = <&v3v3>;
			pwr_sw1-supply = <&bst_out>;
			pwr_sw2-supply = <&bst_out>;

			vddcore: buck1 {
				regulator-name = "vddcore";
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1350000>;
				regulator-always-on;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			vdd_ddr: buck2 {
				regulator-name = "vdd_ddr";
				regulator-min-microvolt = <1350000>;
				regulator-max-microvolt = <1350000>;
				regulator-always-on;
				regulator-initial-mode = <0>;
				regulator-over-current-protection;
			};

			vdd_usb: ldo4 {
				regulator-name = "vdd_usb";
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				interrupts = <IT_CURLIM_LDO4 0>;
			};

			vdda: ldo1 {
				regulator-name = "vdda";
				regulator-min-microvolt = <2900000>;
				regulator-max-microvolt = <2900000>;
				interrupts = <IT_CURLIM_LDO1 0>;
				regulator-boot-on;
			};

			vref_ddr: vref_ddr {
				regulator-name = "vref_ddr";
				regulator-always-on;
				regulator-over-current-protection;
			};

			 bst_out: boost {
				regulator-name = "bst_out";
				interrupts = <IT_OCP_BOOST 0>;
			 };

			vbus_otg: pwr_sw1 {
				regulator-name = "vbus_otg";
				interrupts = <IT_OCP_OTG 0>;
				regulator-active-discharge;
			 };

			 vbus_sw: pwr_sw2 {
				regulator-name = "vbus_sw";
				interrupts = <IT_OCP_SWOUT 0>;
				regulator-active-discharge;
			 };
		};
	};
	/* USER CODE END i2c2 */
};

&ipcc{
	status = "okay";

	/* USER CODE BEGIN ipcc */
	/* USER CODE END ipcc */
};

&iwdg2{
	status = "okay";

	/* USER CODE BEGIN iwdg2 */
	timeout-sec = <32>;
	/* USER CODE END iwdg2 */
};

&pwr{
	status = "okay";

	/* USER CODE BEGIN pwr */
	/* pwr-supply = <&vdd>; */
	/* USER CODE END pwr */
};

&rcc{
	u-boot,dm-pre-reloc;
	status = "okay";

	/* USER CODE BEGIN rcc */
	/* USER CODE END rcc */
};

&rng1{
	status = "okay";

	/* USER CODE BEGIN rng1 */
	/* USER CODE END rng1 */
};

&sdmmc1{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins_mx>;
	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc1 */
	cd-gpios = <&gpiog 2 0>;
	cd-inverted;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&reg_sd1_vmmc>;
	keep-power-in-suspend;
	/* USER CODE END sdmmc1 */
};

&sdmmc2{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins_mx>;
	pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc2 */
	non-removable;
	st,neg-edge;
	bus-width = <8>;
	vmmc-supply = <&v3v3>;
	keep-power-in-suspend;
	/* USER CODE END sdmmc2 */
};

&timers6{
	status = "okay";

	/* USER CODE BEGIN timers6 */
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;
	timer@5 {
		status = "okay";
	};
	/* USER CODE END timers6 */
};

&uart5{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart5_pins_mx>;
	pinctrl-1 = <&uart5_sleep_pins_mx>;
	
	rxen-gpio = <&gpiog 15 GPIO_ACTIVE_HIGH>;
	rts-gpio = <&gpiof 1 GPIO_ACTIVE_HIGH>;
	mode-gpio = <&gpiod 1 GPIO_ACTIVE_HIGH>;
	mode-two-lines-only;
	
	status = "okay";
};

&uart4{
	u-boot,dm-pre-reloc;
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_sleep_pins_mx>;
	
	status = "okay";
};

&usbh_ehci {
	phys = <&usbphyc_port0>;
	phy-names = "usb";
	status = "okay";
};

&usbotg_hs {
	dr_mode = "peripheral";
	force-b-session-valid;
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	status = "okay";
};

&usbphyc {
	vdd3v3-supply = <&vdd_usb>;
	status = "okay";
};

&usbphyc_port0 {
	st,phy-tuning = <&usb_phy_tuning>;
};

&usbphyc_port1 {
	st,phy-tuning = <&usb_phy_tuning>;
};

&usbh_ehci {
	#address-cells = <1>;
	#size-cells = <0>;
	usb1@1 {
		compatible = "usb424,9512";
        #address-cells = <1>;
        #size-cells = <0>;
		reg = <1>;

		usbeth: usbether@1 {
			compatible = "usb424,ec00";
			reg = <1>;
			/* Filled in by U-Boot */
			mac-address = [ 00 00 00 00 00 00 ];			
		};
	};
};

&ltdc {
	status = "okay";
	port {
		#address-cells = <1>;
		#size-cells = <0>;

		ltdc_out_rgb: endpoint {
			remote-endpoint = <&panel_in_rgb>;
		};
	};
};

&gpu {
	contiguous-area = <&gpu_reserved>;
	status = "okay";
};

/* USER CODE BEGIN addons */
&m4_rproc {
memory-region = <&retram>, <&mcuram>, <&mcuram2>, <&vdev0vring0>,
		<&vdev0vring1>, <&vdev0buffer>;
};

&dma1 {
	sram = <&dma_pool>;
};

&dma2 {
	sram = <&dma_pool>;
};

/* PWM for backlight dimming */
&timers2 {
	status = "okay";
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;
	pwm2: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&pwm2bl_pins>;
		pinctrl-1 = <&pwm2bl_sleep_pins>;
		status = "okay";
		};
};

/* PWM for beeper */
&timers5 {
	status = "okay";
	/* spare dmas for other usage */
	/delete-property/dmas;
	/delete-property/dma-names;
	pwm5: pwm {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&pwm5beep_pins>;
		pinctrl-1 = <&pwm5beep_sleep_pins>;
		status = "okay";
		};
};

/* eth0 */
&ethernet0 {
	status = "okay";
	pinctrl-0 = <&ethernet0_rmii_pins>;
	pinctrl-1 = <&ethernet0_rmii_pins_sleep>;
	pinctrl-names = "default", "sleep";
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0>;

	mdio0 {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";
		phy0: ethernet-phy@0 {
			reg = <1>;
		};
	};
};

/* can 0 */
&m_can1 {
	status = "okay";
	pinctrl-0 = <&can0_pins>;
	pinctrl-1 = <&can0_pins_sleep>;
	pinctrl-names = "default", "sleep";
	transceiver = <&tja1145>;
};

/* can 1 */
&m_can2 {
	status = "okay";
	pinctrl-0 = <&can1_pins>;
	pinctrl-1 = <&can1_pins_sleep>;
	pinctrl-names = "default", "sleep";
};

/* SPI dev */
&spi3 {
	status = "okay";

	pinctrl-0 = <&spi3_pins_ns02>;
	pinctrl-names = "default";
	cs-gpios = <&gpiof 9 GPIO_ACTIVE_LOW>;
	/delete-property/dmas;
	/delete-property/dma-names;

	tja1145: tja1145@0 {
		compatible = "nxp,tja1145";
		reg = <0>;
		spi-cpha;
		spi-max-frequency = <500000>;
	};
};

&spi5 {
	status = "okay";

	pinctrl-0 = <&spi5_pins_ns02>;
	pinctrl-names = "default";
	cs-gpios = <&gpiof 6 GPIO_ACTIVE_LOW>, <&gpiod 5 GPIO_ACTIVE_LOW>;
	/delete-property/dmas;
	/delete-property/dma-names;
	
	
	spidev1_0: spi5@0 {
		compatible = "generic,spidev";
		reg = <0>;
		spi-max-frequency = <1000000>;
	};

	flash0: n25q256a@1 {
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "jedec,spi-nor";
		status = "okay";
		reg = <1>;      /* chip select */
		spi-max-frequency = <10000000>;
		/* m25p,fast-read; not compatible with our ic, don't use */
		page-size = <256>; 
		block-size = <16>; /* 2^16, 64KB */
		read-delay = <4>;  /* delay value in read data capture register */
		cdns,tshsl-ns = <50>;
		cdns,tsd2d-ns = <50>;
		cdns,tchsh-ns = <4>;
		cdns,tslch-ns = <4>;
	};
};

&dcmi {
	status = "okay";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&dcmi_pins_ns02>;
	pinctrl-1 = <&dcmi_sleep_pins_ns02>;

	port {
		dcmi_0: endpoint {
			remote-endpoint = <&we20cam_0>;
			bus-width = <8>;
			hsync-active = <1>;
			vsync-active = <1>;
			pclk-sample = <1>;
			pclk-max-frequency = <77000000>;
		};
	};
};
/* USER CODE END addons */

